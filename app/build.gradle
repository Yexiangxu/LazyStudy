plugins {
    id 'com.android.application'
}
apply from: "${rootDir.path}/buildCommon.gradle"// ./同级目录; ../上级目录; 上上级 ../../
apply from: 'build_trace.gradle'//用来追踪编译速度
configSigning()
android {
    namespace 'com.lazyxu.lazystudy'
    defaultConfig {
        applicationId "com.hy.kxxsk"
        versionCode BuildConfig.versionCode
        versionName BuildConfig.versionName
    }
    buildTypes {
        debug {
            minifyEnabled false //代码混淆
            shrinkResources false  //移除无用的resource文件
            zipAlignEnabled false
            resValue "xml", "network_security_config", "@xml/network_security_config_debug"

        }//buildTypes针对开发测
        release {
            minifyEnabled true //代码混淆
            shrinkResources true  //移除无用的resource文件
            zipAlignEnabled true
            resValue "xml", "network_security_config", "@xml/network_security_config_release"

        }
    }
    flavorDimensions("app", "channel")//二维
    productFlavors {//免费版、付费版 productFlavors针对用户
        app1 {
            dimension "app"
            manifestPlaceholders = ["appName": "定制1"]
        }
        app2 {
            dimension "app"
        }
        normal {
            dimension "channel"
        }
        yunkong {
            dimension "channel"
        }
    }

}

dependencies {
    testImplementation 'junit:junit:4.13.2'
    implementation project(path: ':lib_ad')
    implementation project(path: ':lib_base')
    implementation project(path: ':lib_common')
    implementation project(path: ':lib_database')

    implementation project(path: ':lib:network')
    implementation CommonDeps.refreshLayout
    implementation CommonDeps.refreshHeader
    implementation CommonDeps.refreshFooter
    implementation CommonDeps.brvah

    implementation project(':module_search')
    implementation project(':module_video')
    implementation project(':lib_common')
    implementation project(':module_mine')
    implementation project(':module_function')
    runtimeOnly project(':module_login')

    implementation 'com.afollestad.material-dialogs:core:3.3.0'

    api 'com.tencent.mm.opensdk:wechat-sdk-android:6.8.0'
}


def configSigning() {
    File signKeystoreFile = file("${rootDir.path}/sign/keystore.jks")
    if (!signKeystoreFile.exists()) throw new FileNotFoundException("keystore.jks file is empty")
    File signPropertiesFile = file("${rootDir.path}/sign/keystore.properties")
    if (!signPropertiesFile.exists()) throw new FileNotFoundException("keystore.properties file is empty")
    GLog.d("${project.toString()}sign start...")
    project.android {
        Properties properties = new Properties()
        properties.load(new FileInputStream(signPropertiesFile))
        signingConfigs {
            debug {
                storeFile new File(signPropertiesFile.getParent(), properties['KEYSTORE_FILE'])
                storePassword properties['KEYSTORE_PWD']
                keyAlias properties['KEY_ALIAS']
                keyPassword properties['KEY_PWD']
            }
            release {
                storeFile new File(signPropertiesFile.getParent(), properties['KEYSTORE_FILE'])
                storePassword properties['KEYSTORE_PWD']
                keyAlias properties['KEY_ALIAS']
                keyPassword properties['KEY_PWD']
            }
        }
        buildTypes.release.signingConfig signingConfigs.release
    }
    GLog.d("${project.toString()} sign end...")
}

def configApkName() {
    project.android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def fileName = "app-${variant.productFlavors[0].name.toLowerCase()}-v${variant.versionName}_${variant.buildType.name}-${buildApkTime()}.apk"
                variant.getPackageApplication().outputDirectory = new File("${rootDir.path}/apk")
                output.outputFileName = fileName
            }
        }
    }
}

static def buildApkTime() {
    return new Date().format("yyyy-MMdd-HH-mm", TimeZone.getTimeZone("GMT+08:00"))
}


task A {
    GLog.d("configuration A..")
    doFirst {
        GLog.d "doLast A1.."
    }
}
task B {
    GLog.d "configuration B.."
    doFirst {
        GLog.d "doLast B1.."
    }
}



String removeYinHao(String str) {
    return str.replaceFirst('"', '').replaceAll('"$', '')
}

A.mustRunAfter(B)






